steps:

- script: dotnet build --no-restore -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: dotnet build

- script: dotnet pack --no-build -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack.binlog"
  displayName: dotnet pack

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net472
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net472 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net472.binlog"
    testRunTitle: net472-$(Agent.JobName)
  condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp3.1
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f netcoreapp3.1 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_netcoreapp3.1.binlog"
    testRunTitle: netcoreapp3.1-$(Agent.JobName)
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net5.0
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net5.0 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings" /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net5.0.binlog"
    testRunTitle: net5.0-$(Agent.JobName)
  condition: succeededOrFailed()
